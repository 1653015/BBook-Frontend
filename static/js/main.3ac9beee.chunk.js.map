{"version":3,"sources":["Components/HeaderBar/HeaderBar.js","Components/SignIn/SignIn.js","Components/SignUp/SignUp.js","Components/Home/Home.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["HeaderBar","className","to","Component","SignIn","initialValues","email","password","onSubmit","values","actions","setSubmitting","validationSchema","Yup","required","min","max","props","handleSubmit","style","textAlign","touched","errors","type","onChange","handleChange","value","name","disabled","isSubmitting","SignUp","fullname","Home","color","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ac9beee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './HeaderBar.css';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n\r\nclass HeaderBar extends Component {\r\n    // constructor(props){\r\n        // super(props);\r\n        // this.state = {};\r\n    // }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header-bbook\">\r\n                <Link to=\"/\" className=\"bbook-logo\">BBOOK</Link>\r\n                <div className=\"signin-signup-layout\">\r\n                    <Link to=\"/signin\"><div className=\"header-item\">Đăng nhập</div></Link>\r\n                    <Link to=\"/signup\"><div className=\"header-item\">Đăng kí</div></Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderBar;","import React, { Component } from 'react';\r\nimport {Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport './SignIn.css';\r\n\r\nclass SignIn extends Component {\r\n    // constructor(props){\r\n        // super(props);\r\n        // this.state = {};\r\n    // }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SignIn\">\r\n                <Formik\r\n                    initialValues={{email: '', password: ''}}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(false);\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                        email: Yup.string()\r\n                            .email('Invalid email address')\r\n                            .required('Email is empty'),\r\n                        password: Yup.string()\r\n                            .min(8, 'To short!!!')\r\n                            .max(50, 'To long!!!')\r\n                            .required('Password is empty'),\r\n                    })}\r\n                    >\r\n                        {\r\n                            props => (\r\n                                <form onSubmit={props.handleSubmit} className=\"sign-in-up-form\">\r\n                                    <h1 style={{textAlign: \"center\"}} className=\"font-white\">Đăng Nhập</h1>\r\n\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Email</div>\r\n                                            {props.touched.email && props.errors.email? (\r\n                                                <div className=\"invalid-message\">{props.errors.email}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"email\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.email}\r\n                                            name=\"email\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Password</div>\r\n                                            {props.touched.password && props.errors.password? (\r\n                                                <div className=\"invalid-message\">{props.errors.password}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"password\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.password}\r\n                                            name=\"password\"\r\n                                        />\r\n                                    </div>\r\n                                    <input type=\"submit\" disabled={props.isSubmitting} value=\"Đăng Nhập\"/>\r\n                                </form>\r\n                            )\r\n                        }\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React, { Component } from 'react';\r\nimport {Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport './SignUp.css';\r\n\r\nclass SignUp extends Component {\r\n    // constructor(props){\r\n        // super(props);\r\n        // this.state = {};\r\n    // }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SignUp\">\r\n                <Formik\r\n                    initialValues={{fullname: '', email: '', password: ''}}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(false);\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                        fullname: Yup.string()\r\n                            .required('Your name is empty'),\r\n                        email: Yup.string()\r\n                            .email('Invalid email address')\r\n                            .required('Email is empty'),\r\n                        password: Yup.string()\r\n                            .min(8, 'To short!!!')\r\n                            .max(50, 'To long!!!')\r\n                            .required('Password is empty'),\r\n                    })}\r\n                    >\r\n                        {\r\n                            props => (\r\n                                <form onSubmit={props.handleSubmit} className=\"sign-in-up-form\">\r\n                                    <h1 style={{textAlign: \"center\"}} className=\"font-white\">Đăng Kí</h1>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Full-name</div>\r\n                                            {props.touched.email && props.errors.email? (\r\n                                                <div className=\"invalid-message\">{props.errors.fullname}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"text\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.fullname}\r\n                                            name=\"fullname\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Email</div>\r\n                                            {props.touched.email && props.errors.email? (\r\n                                                <div className=\"invalid-message\">{props.errors.email}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"email\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.email}\r\n                                            name=\"email\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Password</div>\r\n                                            {props.touched.password && props.errors.password? (\r\n                                                <div className=\"invalid-message\">{props.errors.password}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"password\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.password}\r\n                                            name=\"password\"\r\n                                        />\r\n                                    </div>\r\n                                    <input type=\"submit\" disabled={props.isSubmitting} value=\"Đăng Kí\"/>\r\n                                </form>\r\n                            )\r\n                        }\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from 'react';\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n    // constructor(props){\r\n        // super(props);\r\n        // this.state = {};\r\n    // }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        return (\r\n            <div style={{color: \"white\", textAlign: \"center\"}}>\r\n                THIS IS MADNESS\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './App.css';\r\nimport HeaderBar from '../HeaderBar/HeaderBar';\r\nimport SignIn from '../SignIn/SignIn';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n  } from \"react-router-dom\";\r\nimport SignUp from '../SignUp/SignUp';\r\nimport Home from '../Home/Home';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"background-image\"></div>\r\n            <div className=\"background-content\">\r\n                <Router>\r\n                    <HeaderBar/>\r\n                    <Switch>\r\n                        <Route path=\"/signin\">\r\n                            <SignIn/>\r\n                        </Route>\r\n                        <Route path=\"/signup\">\r\n                            <SignUp/>\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Home/>\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}