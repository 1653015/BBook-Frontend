{"version":3,"sources":["Components/HeaderBar/HeaderBar.js","Components/SignIn/SignIn.js","Components/SignUp/SignUp.js","Components/LandingPage/LandingPage.js","Components/Home/Home.js","Components/ErrorPage/ErrorPage.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["HeaderBar","props","state","cookies","Cookies","this","isLogin","className","to","Component","SignIn","errorMessage","redirect","login","bind","values","actions","fetch","method","headers","body","JSON","stringify","login_id","email","password","then","res","status","text","setState","setSubmitting","set","get","initialValues","onSubmit","validationSchema","Yup","required","min","max","handleSubmit","style","textAlign","touched","errors","type","onChange","handleChange","value","name","placeholder","disabled","isSubmitting","SignUp","signup","fullname","LandingPage","Home","logout","remove","path","onClick","ErrorPage","App","basename","process","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76f1d34c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './HeaderBar.css';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport Cookies from 'universal-cookie';\r\n\r\nclass HeaderBar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cookies: new Cookies()\r\n        };\r\n    }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        if(this.props.isLogin){\r\n            return (\r\n                <div className=\"header-bbook\">\r\n                <Link to='/' className=\"bbook-logo\">BBOOK</Link>\r\n                <div className=\"signin-signup-layout\">\r\n                    <div className=\"header-item\">\r\n                        Nguoi Dung\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"header-bbook\">\r\n                <Link to='/' className=\"bbook-logo\">BBOOK</Link>\r\n                <div className=\"signin-signup-layout\">\r\n                    <Link to='/signin'><div className=\"header-item\">Đăng nhập</div></Link>\r\n                    <Link to='/signup'><div className=\"header-item\">Đăng kí</div></Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderBar;","import React, { Component } from 'react';\r\nimport {Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport './SignIn.css';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\nclass SignIn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: '',\r\n            redirect: false,\r\n            cookies: new Cookies()\r\n        };\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    login(values, actions){\r\n        fetch('https://cors-anywhere.herokuapp.com/https://bbook-backend.herokuapp.com/user/signin',{\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({login_id: values.email, password: values.password})\r\n        })\r\n        .then(res => {\r\n            if(res.status === 400) {\r\n                res.text().then(text => this.setState({errorMessage: text}));\r\n                actions.setSubmitting(false);\r\n            } else if (res.status === 200) {\r\n                res.text().then(text => {\r\n                    this.state.cookies.set('userToken', text);\r\n                    this.setState({redirect: true});\r\n                });\r\n            } else {\r\n                this.setState({errorMessage: 'Lỗi không xác định!!!'});\r\n                actions.setSubmitting(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.redirect) {\r\n            return (<Redirect to='/home'/>)\r\n        }\r\n\r\n        if(this.state.cookies.get('userToken')){\r\n            return (<Redirect to='/home'/>)\r\n        }\r\n\r\n        return (\r\n            <div className=\"SignIn\">\r\n                <Formik\r\n                    initialValues={{email: '', password: ''}}\r\n                    onSubmit={(values, actions) => {\r\n                        this.login(values, actions);\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                        email: Yup.string()\r\n                            .required('Email is empty'),\r\n                        password: Yup.string()\r\n                            .min(8, 'To short!!!')\r\n                            .max(50, 'To long!!!')\r\n                            .required('Password is empty'),\r\n                    })}\r\n                    >\r\n                        {\r\n                            props => (\r\n                                <form onSubmit={props.handleSubmit} className=\"sign-in-up-form\">\r\n                                    <h1 style={{textAlign: \"center\"}} className=\"font-white\">Đăng Nhập</h1>\r\n\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div style={{textAlign: \"center\"}} className=\"font-white\" >Email (Tên Đăng Nhập)</div>\r\n                                            {props.touched.email && props.errors.email? (\r\n                                                <div className=\"invalid-message\">{props.errors.email}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"text\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.email}\r\n                                            name=\"email\"\r\n                                            placeholder=\"Hãy nhập email của bạn\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Mật Khẩu</div>\r\n                                            {props.touched.password && props.errors.password? (\r\n                                                <div className=\"invalid-message\">{props.errors.password}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"password\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.password}\r\n                                            name=\"password\"\r\n                                            placeholder=\"Hãy nhập mật khẩu của bạn\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"error-message\">{this.state.errorMessage}</div>\r\n                                    <input type=\"submit\" disabled={props.isSubmitting} value=\"Đăng Nhập\"/>\r\n                                </form>\r\n                            )\r\n                        }\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React, { Component } from 'react';\r\nimport {Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport './SignUp.css';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\nclass SignUp extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: '',\r\n            redirect: false,\r\n            cookies: new Cookies()\r\n        };\r\n        this.signup = this.signup.bind(this);\r\n    }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    signup(values, actions){\r\n        fetch('https://cors-anywhere.herokuapp.com/https://bbook-backend.herokuapp.com/user/register',{\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    login_id: values.fullname, \r\n                    password: values.password,\r\n                    email: values.email\r\n                }\r\n            )\r\n        })\r\n        .then(res => {\r\n            if(res.status === 400) {\r\n                res.text().then(text => this.setState({errorMessage: text}));\r\n                actions.setSubmitting(false);\r\n            } else if (res.status === 200) {\r\n                res.text().then(text => {\r\n                    this.state.cookies.set('userToken', text);\r\n                    this.setState({redirect: true});\r\n                });\r\n            } else {\r\n                this.setState({errorMessage: 'Lỗi không xác định!!!'});\r\n                actions.setSubmitting(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.redirect) {\r\n            return (<Redirect to='/home'/>)\r\n        }\r\n\r\n        if(this.state.cookies.get('userToken')){\r\n            return (<Redirect to='/home'/>)\r\n        }\r\n\r\n        return (\r\n            <div className=\"SignUp\">\r\n                <Formik\r\n                    initialValues={{fullname: '', email: '', password: ''}}\r\n                    onSubmit={(values, actions) => {\r\n                        this.signup(values, actions);\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                        fullname: Yup.string()\r\n                            .required('Your name is empty'),\r\n                        email: Yup.string()\r\n                            .email('Invalid email address')\r\n                            .required('Email is empty'),\r\n                        password: Yup.string()\r\n                            .min(8, 'To short!!!')\r\n                            .max(50, 'To long!!!')\r\n                            .required('Password is empty'),\r\n                    })}\r\n                    >\r\n                        {\r\n                            props => (\r\n                                <form onSubmit={props.handleSubmit} className=\"sign-in-up-form\">\r\n                                    <h1 style={{textAlign: \"center\"}} className=\"font-white\">Đăng Kí</h1>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Tên Đăng Nhập</div>\r\n                                            {props.touched.email && props.errors.email? (\r\n                                                <div className=\"invalid-message\">{props.errors.fullname}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"text\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.fullname}\r\n                                            name=\"fullname\"\r\n                                            placeholder=\"Hãy nhập họ và tên\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Email</div>\r\n                                            {props.touched.email && props.errors.email? (\r\n                                                <div className=\"invalid-message\">{props.errors.email}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"email\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.email}\r\n                                            name=\"email\"\r\n                                            placeholder=\"Hãy nhập email của bạn\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-item\">\r\n                                        <div className=\"form-item-header\">\r\n                                            <div className=\"font-white\">Mật Khẩu</div>\r\n                                            {props.touched.password && props.errors.password? (\r\n                                                <div className=\"invalid-message\">{props.errors.password}</div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <input className=\"form-input\"\r\n                                            type=\"password\"\r\n                                            onChange={props.handleChange}\r\n                                            value={props.values.password}\r\n                                            name=\"password\"\r\n                                            placeholder=\"Hãy nhập mật khẩu của bạn\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"error-message\">{this.state.errorMessage}</div>\r\n                                    <input type=\"submit\" disabled={props.isSubmitting} value=\"Đăng Kí\"/>\r\n                                </form>\r\n                            )\r\n                        }\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from 'react';\r\nimport './LandingPage.css';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\nclass LandingPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            redirect: false,\r\n            cookies: new Cookies()\r\n        };\r\n    }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        if(this.state.redirect) {\r\n            return (<Redirect to='/home'/>)\r\n        }\r\n\r\n        if(this.state.cookies.get('userToken')){\r\n            return (<Redirect to='/home'/>)\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                THIS IS LANDINGPAGE\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingPage;","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport {Redirect} from 'react-router-dom'\r\nimport Cookies from 'universal-cookie';\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            redirect: false,\r\n            cookies: new Cookies()\r\n        };\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n    // componentWillMount(){}\r\n    componentDidMount(){\r\n        if(this.state.cookies.get('userToken')){\r\n        } else {\r\n            this.setState({redirect: true});\r\n        }\r\n    }\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n    logout(){\r\n        this.state.cookies.set('userToken', '');\r\n        this.state.cookies.remove('userToken', {path: '/'});\r\n        this.setState({redirect: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.redirect) {\r\n            return (<Redirect to={'/signin'} />);\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <button type=\"button\" onClick={this.logout} className=\"btn-logout\">LOG OUT</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport './ErrorPage.css';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nclass ErrorPage extends Component {\r\n    // constructor(props){\r\n        // super(props);\r\n        // this.state = {};\r\n    // }\r\n\r\n    // componentWillMount(){}\r\n    // componentDidMount(){}\r\n    // componentWillUnmount(){}\r\n\r\n    // componentWillReceiveProps(){}\r\n    // shouldComponentUpdate(){}\r\n    // componentWillUpdate(){}\r\n    // componentDidUpdate(){}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"sign-in-up-form\">\r\n                    404 PAGE NOT FOUND\r\n                    <div>\r\n                        <Link to=\"/home\"><div className=\"header-item\">RETURN</div></Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ErrorPage;","import React from 'react';\r\nimport './App.css';\r\nimport HeaderBar from '../HeaderBar/HeaderBar';\r\nimport SignIn from '../SignIn/SignIn';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n  } from \"react-router-dom\";\r\nimport SignUp from '../SignUp/SignUp';\r\nimport LandingPage from '../LandingPage/LandingPage';\r\nimport Home from '../Home/Home';\r\nimport ErrorPage from '../ErrorPage/ErrorPage';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"background-image\"></div>\r\n            <div className=\"background-content\">\r\n                <Router basename={process.env.PUBLIC_URL + '/#'}>\r\n                    <Switch>\r\n                        <Route exact path='/signin' >\r\n                            <HeaderBar/>\r\n                            <SignIn/>\r\n                        </Route>\r\n                        <Route exact path='/signup'>\r\n                            <HeaderBar/>\r\n                            <SignUp/>\r\n                        </Route>\r\n                        <Route exact path='/home'>\r\n                            <HeaderBar isLogin={true}/>\r\n                            <Home/>\r\n                        </Route>\r\n                        <Route exact path='/'>\r\n                            <HeaderBar/>\r\n                            <LandingPage/>\r\n                        </Route>\r\n                        <Route>\r\n                            <ErrorPage/>\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}